return (1)
return (0)
}
#Função de treinamento
training <- function(x,w,error,LF){
for(i in 1:length(w)){
w[i] <- w[i] + LF*error*x[i]
}
return(w)
}
#Lê da base e insere no vetor x
read_database <- function(line,database,cols){
x <- c()
for (i in 1:cols){
x[i] <- database[line,i]
}
return (x)
}
learn <- function(active,x,cols){
if(active != x[cols])
return (TRUE)
return (FALSE)
}
number_decipher <- function(number){
for(i in 1:10){
if(number[i] == 1){
return (i - 1)
}
}
}
perceptron <- function(LF,database){
rows <- nrow(database)
cols <- ncol(database)
w <- c(runif ((cols - 1),-1,1)) #Pesos sinápticos aleatórios (valores entre -1 e 1)
number <- c()
epoch <- 0
for (i in 1:rows){
x <- read_database(i,database,cols)
learning <- TRUE
while (learning){
result <- v(x,w)
active <- activation(result)
error <- x[cols] - active #Calculando o erro
w <- training(x,w,error,LF) #Ajustando os pesos
#print(w)
learning <- learn(active,x,cols)
epoch <- epoch + 1
}
number[i] <- active
}
n <- number_decipher(number)
print(format(data.frame("Número" = n,"Épocas" = epoch,check.names = FALSE)))
}
start <- function(){
for(i in databases){
database <- read.csv(i)
perceptron(0.1,database)
}
}
start()
setwd("/home/cainan/IC/perceptron/numbers")
getwd()
#0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
#0,1,1,1,1,1,0,1,1,1,1,0,1,1,1,1,1,0,0,1,1,1,0,1,1,1,1,1,0,1,1,1,1,1,0,1,1,1,1,1,0,1,1,1,1,1,0,0,0,1,1,1,0,0,0,1,0,0,0,0,1
#0,1,0,0,0,1,0,1,0,0,0,0,1,0,0,0,1,0,1,0,0,0,0,1,0,0,0,0,0,1,0,0,0,1,0,0,0,1,0,0,0,1,0,0,0,1,0,0,1,0,0,0,1,0,0,1,0,0,0,0,1
#0,1,0,0,0,1,0,1,0,0,0,0,1,0,0,0,1,0,1,0,0,0,0,1,0,0,0,0,0,1,0,0,0,1,0,0,0,1,0,0,0,1,0,0,0,1,0,1,0,0,0,0,0,1,0,1,1,0,0,0,1
#0,1,1,1,1,0,0,1,1,1,1,0,1,1,1,1,0,0,1,0,0,0,0,1,1,1,1,1,0,1,1,1,1,0,0,0,0,1,0,0,0,1,1,1,1,0,0,1,0,0,0,0,0,1,0,1,0,1,0,0,1
#0,1,0,0,0,0,0,1,0,0,0,0,1,0,1,0,0,0,1,0,0,0,0,1,0,0,0,0,0,1,0,0,0,0,0,0,0,1,0,0,0,1,0,1,0,0,0,1,0,0,0,0,0,1,0,1,0,0,1,0,1
#0,1,0,0,0,0,0,1,0,0,0,0,1,0,0,1,0,0,1,0,0,0,0,1,0,0,0,0,0,1,0,0,0,0,0,0,0,1,0,0,0,1,0,0,1,0,0,0,1,0,0,0,1,0,0,1,0,0,0,1,1
#0,1,0,0,0,0,0,1,1,1,1,0,1,0,0,0,1,0,0,1,1,1,0,1,1,1,1,1,0,1,0,0,0,0,0,0,0,1,0,0,0,1,0,0,0,1,0,0,0,1,1,1,0,0,0,1,0,0,0,0,1
#0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
databases <- list("zero.csv","one.csv","two.csv","three.csv","four.csv","five.csv",
"six.csv","seven.csv","eight.csv","nine.csv")
#Combinador Linear
v <- function(x,w){
sum <- 0
for (i in 1:length(w)){
sum <- sum + (x[i]*w[i])
}
return (sum)
}
#Função de ativação
activation <- function(result){
if(result >= 0)
return (1)
return (0)
}
#Função de treinamento
training <- function(x,w,error,LF){
for(i in 1:length(w)){
w[i] <- w[i] + LF*error*x[i]
}
return(w)
}
#Lê da base e insere no vetor x
read_database <- function(line,database,cols){
x <- c()
for (i in 1:cols){
x[i] <- database[line,i]
}
return (x)
}
learn <- function(active,x,cols){
if(active != x[cols])
return (TRUE)
return (FALSE)
}
number_decipher <- function(number){
for(i in 1:10){
if(number[i] == 1){
return (i - 1)
}
}
}
perceptron <- function(LF,database){
rows <- nrow(database)
cols <- ncol(database)
w <- c(runif ((cols - 1),-1,1)) #Pesos sinápticos aleatórios (valores entre -1 e 1)
number <- c()
epoch <- 0
for (i in 1:rows){
x <- read_database(i,database,cols)
learning <- TRUE
while (learning){
result <- v(x,w)
active <- activation(result)
error <- x[cols] - active #Calculando o erro
w <- training(x,w,error,LF) #Ajustando os pesos
#print(w)
learning <- learn(active,x,cols)
epoch <- epoch + 1
}
number[i] <- active
}
n <- number_decipher(number)
print(format(data.frame("Número" = n,"Épocas" = epoch,check.names = FALSE)))
}
start <- function(){
for(i in databases){
database <- read.csv(i)
perceptron(0.1,database)
}
}
start()
setwd("/home/cainan/IC/perceptron/numbers")
getwd()
databases <- list("zero.csv","one.csv","two.csv","three.csv","four.csv","five.csv",
"six.csv","seven.csv","eight.csv","nine.csv")
#Combinador Linear
v <- function(x,w){
sum <- 0
for (i in 1:length(w)){
sum <- sum + (x[i]*w[i])
}
return (sum)
}
#Função de ativação
activation <- function(result){
if(result >= 0)
return (1)
return (0)
}
#Função de treinamento
training <- function(x,w,error,LF){
for(i in 1:length(w)){
w[i] <- w[i] + LF*error*x[i]
}
return(w)
}
#Lê da base e insere no vetor x
read_database <- function(line,database,cols){
x <- c()
for (i in 1:cols){
x[i] <- database[line,i]
}
return (x)
}
learn <- function(active,x,cols){
if(active != x[cols])
return (TRUE)
return (FALSE)
}
number_decipher <- function(number){
for(i in 1:10){
if(number[i] == 1){
return (i - 1)
}
}
}
perceptron <- function(LF,database){
rows <- nrow(database)
cols <- ncol(database)
w <- c(runif ((cols - 1),-1,1)) #Pesos sinápticos aleatórios (valores entre -1 e 1)
number <- c()
epoch <- 0
for (i in 1:rows){
x <- read_database(i,database,cols)
learning <- TRUE
while (learning){
result <- v(x,w)
active <- activation(result)
error <- x[cols] - active #Calculando o erro
w <- training(x,w,error,LF) #Ajustando os pesos
#print(w)
learning <- learn(active,x,cols)
epoch <- epoch + 1
}
}
print(format(data.frame("Épocas" = epoch,check.names = FALSE)))
}
start <- function(){
for(i in databases){
database <- read.csv(i)
perceptron(0.1,database)
}
}
start()
setwd("/home/cainan/IC/perceptron/numbers")
getwd()
databases <- list("zero.csv","one.csv","two.csv","three.csv","four.csv","five.csv",
"six.csv","seven.csv","eight.csv","nine.csv")
#Combinador Linear
v <- function(x,w){
sum <- 0
for (i in 1:length(w)){
sum <- sum + (x[i]*w[i])
}
return (sum)
}
#Função de ativação
activation <- function(result){
if(result >= 0)
return (1)
return (0)
}
#Função de treinamento
training <- function(x,w,error,LF){
for(i in 1:length(w)){
w[i] <- w[i] + LF*error*x[i]
}
return(w)
}
#Lê da base e insere no vetor x
read_database <- function(line,database,cols){
x <- c()
for (i in 1:cols){
x[i] <- database[line,i]
}
return (x)
}
learn <- function(active,x,cols){
if(active != x[cols])
return (TRUE)
return (FALSE)
}
number_decipher <- function(number){
for(i in 1:10){
if(number[i] == 1){
return (i - 1)
}
}
}
perceptron <- function(LF,database){
rows <- nrow(database)
cols <- ncol(database)
w <- c(runif ((cols - 1),-1,1)) #Pesos sinápticos aleatórios (valores entre -1 e 1)
number <- c()
epoch <- 0
for (i in 1:rows){
x <- read_database(i,database,cols)
learning <- TRUE
if (learning){
i <- 1
result <- v(x,w)
active <- activation(result)
error <- x[cols] - active #Calculando o erro
w <- training(x,w,error,LF) #Ajustando os pesos
#print(w)
learning <- learn(active,x,cols)
epoch <- epoch + 1
}
}
print(format(data.frame("Épocas" = epoch,check.names = FALSE)))
}
start <- function(){
for(i in databases){
database <- read.csv(i)
perceptron(0.1,database)
}
}
start()
setwd("/home/cainan/IC/perceptron/numbers")
getwd()
databases <- list("zero.csv","one.csv","two.csv","three.csv","four.csv","five.csv",
"six.csv","seven.csv","eight.csv","nine.csv")
#Combinador Linear
v <- function(x,w){
sum <- 0
for (i in 1:length(w)){
sum <- sum + (x[i]*w[i])
}
return (sum)
}
#Função de ativação
activation <- function(result){
if(result >= 0)
return (1)
return (0)
}
#Função de treinamento
training <- function(x,w,error,LF){
for(i in 1:length(w)){
w[i] <- w[i] + LF*error*x[i]
}
return(w)
}
#Lê da base e insere no vetor x
read_database <- function(line,database,cols){
x <- c()
for (i in 1:cols){
x[i] <- database[line,i]
}
return (x)
}
learn <- function(active,x,cols){
if(active != x[cols])
return (TRUE)
return (FALSE)
}
number_decipher <- function(number){
for(i in 1:10){
if(number[i] == 1){
return (i - 1)
}
}
}
perceptron <- function(LF,database){
rows <- nrow(database)
cols <- ncol(database)
w <- c(runif ((cols - 1),-1,1)) #Pesos sinápticos aleatórios (valores entre -1 e 1)
number <- c()
epoch <- 0
for (i in 1:rows){
x <- read_database(i,database,cols)
learning <- TRUE
if (learning){
i <- 1
result <- v(x,w)
active <- activation(result)
error <- x[cols] - active #Calculando o erro
w <- training(x,w,error,LF) #Ajustando os pesos
print(w)
learning <- learn(active,x,cols)
epoch <- epoch + 1
}
}
print(format(data.frame("Épocas" = epoch,check.names = FALSE)))
}
start <- function(){
for(i in databases){
database <- read.csv(i)
perceptron(0.1,database)
}
}
start()
setwd("/home/cainan/IC/perceptron/numbers")
getwd()
databases <- list("zero.csv","one.csv","two.csv","three.csv","four.csv","five.csv",
"six.csv","seven.csv","eight.csv","nine.csv")
#Combinador Linear
v <- function(x,w){
sum <- 0
for (i in 1:length(w)){
sum <- sum + (x[i]*w[i])
}
return (sum)
}
#Função de ativação
activation <- function(result){
if(result >= 0)
return (1)
return (0)
}
#Função de treinamento
training <- function(x,w,error,LF){
for(i in 1:length(w)){
w[i] <- w[i] + LF*error*x[i]
}
return(w)
}
#Lê da base e insere no vetor x
read_database <- function(line,database,cols){
x <- c()
for (i in 1:cols){
x[i] <- database[line,i]
}
return (x)
}
learn <- function(active,x,cols){
if(active != x[cols])
return (TRUE)
return (FALSE)
}
number_decipher <- function(number){
for(i in 1:10){
if(number[i] == 1){
return (i - 1)
}
}
}
perceptron <- function(LF,database){
rows <- nrow(database)
cols <- ncol(database)
w <- c(runif ((cols - 1),-1,1)) #Pesos sinápticos aleatórios (valores entre -1 e 1)
number <- c()
epoch <- 0
for (i in 1:rows){
x <- read_database(i,database,cols)
learning <- TRUE
if (learning){
i <- 1
result <- v(x,w)
active <- activation(result)
error <- x[cols] - active #Calculando o erro
w <- training(x,w,error,LF) #Ajustando os pesos
print(w)
learning <- learn(active,x,cols)
}
epoch <- epoch + 1
}
print(format(data.frame("Épocas" = epoch,check.names = FALSE)))
}
start <- function(){
for(i in databases){
database <- read.csv(i)
perceptron(0.1,database)
}
}
start()
setwd("/home/cainan/IC/perceptron/numbers")
getwd()
databases <- list("zero.csv","one.csv","two.csv","three.csv","four.csv","five.csv",
"six.csv","seven.csv","eight.csv","nine.csv")
#Combinador Linear
v <- function(x,w){
sum <- 0
for (i in 1:length(w)){
sum <- sum + (x[i]*w[i])
}
return (sum)
}
#Função de ativação
activation <- function(result){
if(result >= 0)
return (1)
return (0)
}
#Função de treinamento
training <- function(x,w,error,LF){
for(i in 1:length(w)){
w[i] <- w[i] + LF*error*x[i]
}
return(w)
}
#Lê da base e insere no vetor x
read_database <- function(line,database,cols){
x <- c()
for (i in 1:cols){
x[i] <- database[line,i]
}
return (x)
}
learn <- function(active,x,cols){
if(active != x[cols])
return (TRUE)
return (FALSE)
}
number_decipher <- function(number){
for(i in 1:10){
if(number[i] == 1){
return (i - 1)
}
}
}
perceptron <- function(LF,database){
rows <- nrow(database)
cols <- ncol(database)
w <- c(runif ((cols - 1),-1,1)) #Pesos sinápticos aleatórios (valores entre -1 e 1)
number <- c()
epoch <- 0
for (i in 1:rows){
x <- read_database(i,database,cols)
learning <- TRUE
while (learning){
result <- v(x,w)
active <- activation(result)
error <- x[cols] - active #Calculando o erro
w <- training(x,w,error,LF) #Ajustando os pesos
#print(w)
learning <- learn(active,x,cols)
epoch <- epoch + 1
}
}
print(format(data.frame("Épocas" = epoch,check.names = FALSE)))
}
start <- function(){
for(i in databases){
database <- read.csv(i)
perceptron(0.1,database)
}
}
start()
