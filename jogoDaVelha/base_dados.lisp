(defvar hum 1)
(defvar pc 2)
(defvar bot 3)
(defvar tabuleiro '((nil nil nil) (nil nil nil) (nil nil nil)))
(defvar regras '( 	((and (ia 0 0) (ia 0 1) (v 0 2)) 0 2) ((and (ia 0 0) (v 0 1) (ia 0 2)) 0 1) ((and (v 0 0) (ia 0 1) (ia 0 2)) 0 0)
					((and (ia 1 0) (ia 1 1) (v 1 2)) 1 2) ((and (ia 1 0) (v 1 1) (ia 1 2)) 1 1) ((and (v 1 0) (ia 1 1) (ia 1 2)) 1 0)
					((and (ia 2 0) (ia 2 1) (v 2 2)) 2 2) ((and (ia 2 0) (v 2 1) (ia 2 2)) 2 1) ((and (v 2 0) (ia 2 1) (ia 2 2)) 2 0)
					((and (ia 0 0) (ia 1 0) (v 2 0)) 2 0) ((and (ia 0 0) (v 1 0) (ia 2 0)) 1 0) ((and (v 0 0) (ia 1 0) (ia 2 0)) 0 0)
					((and (ia 0 1) (ia 1 1) (v 2 1)) 2 1) ((and (ia 0 1) (v 1 1) (ia 2 1)) 1 1) ((and (v 0 1) (ia 1 1) (ia 2 1)) 0 1)
					((and (ia 0 2) (ia 1 2) (v 2 2)) 2 2) ((and (ia 0 2) (v 1 2) (ia 2 2)) 1 2) ((and (v 0 2) (ia 1 2) (ia 2 2)) 0 2)
					((and (ia 0 0) (ia 1 1) (v 2 2)) 2 2) ((and (ia 0 0) (v 1 1) (ia 2 2)) 1 1) ((and (v 0 0) (ia 1 1) (ia 2 2)) 0 0)
					((and (ia 0 2) (ia 1 1) (v 2 0)) 2 0) ((and (ia 0 2) (v 1 1) (ia 2 0)) 1 1) ((and (v 0 2) (ia 1 1) (ia 2 0)) 0 2)

					((and (h 0 0) (h 0 1) (v 0 2)) 0 2) ((and (h 0 0) (v 0 1) (h 0 2)) 0 1) ((and (v 0 0) (h 0 1) (h 0 2)) 0 0)
					((and (h 1 0) (h 1 1) (v 1 2)) 1 2) ((and (h 1 0) (v 1 1) (h 1 2)) 1 1) ((and (v 1 0) (h 1 1) (h 1 2)) 1 0)
					((and (h 2 0) (h 2 1) (v 2 2)) 2 2) ((and (h 2 0) (v 2 1) (h 2 2)) 2 1) ((and (v 2 0) (h 2 1) (h 2 2)) 2 0)
					((and (h 0 0) (h 1 0) (v 2 0)) 2 0) ((and (h 0 0) (v 1 0) (h 2 0)) 1 0) ((and (v 0 0) (h 1 0) (h 2 0)) 0 0)
					((and (h 0 1) (h 1 1) (v 2 1)) 2 1) ((and (h 0 1) (v 1 1) (h 2 1)) 1 1) ((and (v 0 1) (h 1 1) (h 2 1)) 0 1)
					((and (h 0 2) (h 1 2) (v 2 2)) 2 2) ((and (h 0 2) (v 1 2) (h 2 2)) 1 2) ((and (v 0 2) (h 1 2) (h 2 2)) 0 2)
					((and (h 0 0) (h 1 1) (v 2 2)) 2 2) ((and (h 0 0) (v 1 1) (h 2 2)) 1 1) ((and (v 0 0) (h 1 1) (h 2 2)) 0 0)
					((and (h 0 2) (h 1 1) (v 2 0)) 2 0) ((and (h 0 2) (v 1 1) (h 2 0)) 1 1) ((and (v 0 2) (h 1 1) (h 2 0)) 0 2)

					((and (bt 0 0) (bt 0 1) (v 0 2)) 0 2) ((and (bt 0 0) (v 0 1) (bt 0 2)) 0 1) ((and (v 0 0) (bt 0 1) (bt 0 2)) 0 0)
					((and (bt 1 0) (bt 1 1) (v 1 2)) 1 2) ((and (bt 1 0) (v 1 1) (bt 1 2)) 1 1) ((and (v 1 0) (bt 1 1) (bt 1 2)) 1 0)
					((and (bt 2 0) (bt 2 1) (v 2 2)) 2 2) ((and (bt 2 0) (v 2 1) (bt 2 2)) 2 1) ((and (v 2 0) (bt 2 1) (bt 2 2)) 2 0)
					((and (bt 0 0) (bt 1 0) (v 2 0)) 2 0) ((and (bt 0 0) (v 1 0) (bt 2 0)) 1 0) ((and (v 0 0) (bt 1 0) (bt 2 0)) 0 0)
					((and (bt 0 1) (bt 1 1) (v 2 1)) 2 1) ((and (bt 0 1) (v 1 1) (bt 2 1)) 1 1) ((and (v 0 1) (bt 1 1) (bt 2 1)) 0 1)
					((and (bt 0 2) (bt 1 2) (v 2 2)) 2 2) ((and (bt 0 2) (v 1 2) (bt 2 2)) 1 2) ((and (v 0 2) (bt 1 2) (bt 2 2)) 0 2)
					((and (bt 0 0) (bt 1 1) (v 2 2)) 2 2) ((and (bt 0 0) (v 1 1) (bt 2 2)) 1 1) ((and (v 0 0) (bt 1 1) (bt 2 2)) 0 0)
					((and (bt 0 2) (bt 1 1) (v 2 0)) 2 0) ((and (bt 0 2) (v 1 1) (bt 2 0)) 1 1) ((and (v 0 2) (bt 1 1) (bt 2 0)) 0 2)
							;Regras extras
					((v 1 1) 1 1) ((and (v 0 0) (v 0 1) (v 0 2) (v 1 0) (h 1 1) (v 1 2) (v 2 0) (v 2 1) (v 2 2)) 0 2)
					((and (h 0 0) (h 2 1) (v 2 0)) 2 0) ((or (and (h 0 1) (h 2 0) (v 0 0)) (and (h 1 0) (h 0 2) (v 0 0))) 0 0) 
					((or (and (h 0 2) (h 2 1) (v 2 2)) (and (h 2 0) (h 1 2) (v 2 2))) 2 2) ((or (and (h 0 1) (h 2 2) (v 0 2)) (and (h 0 0) (h 1 2) (v 0 2))) 0 2) 
					((or (and (h 0 0) (h 2 2) (v 1 0)) (and (h 0 2) (h 2 0) (v 1 2))) 1 0)
					((and (h 1 0) (h 2 2) (v 2 0)) 2 0) ((and (h 0 0) (v 2 0)) 2 0) ((and (h 0 2) (v 2 2)) 2 2) ((and (h 2 0) (v 0 0)) 0 0) 
					((and (h 2 2) (v 0 2)) 0 2) ((and (h 0 1) (h 1 0) (v 0 0)) 0 0) ((and (h 0 1) (h 1 2) (v 0 2)) 0 2) ((and (h 1 2) (h 2 1) (v 2 2)) 2 2) 
					((and (h 2 1) (h 1 0) (v 2 0)) 2 0)

					((v 1 1) 1 1) ((and (v 0 0) (v 0 1) (v 0 2) (v 1 0) (bt 1 1) (v 1 2) (v 2 0) (v 2 1) (v 2 2)) 0 2)
					((and (bt 0 0) (bt 2 1) (v 2 0)) 2 0) ((or (and (bt 0 1) (bt 2 0) (v 0 0)) (and (bt 1 0) (bt 0 2) (v 0 0))) 0 0) 
					((or (and (bt 0 2) (bt 2 1) (v 2 2)) (and (bt 2 0) (bt 1 2) (v 2 2))) 2 2) ((or (and (bt 0 1) (bt 2 2) (v 0 2)) (and (bt 0 0) (bt 1 2) (v 0 2))) 0 2) 
					((or (and (bt 0 0) (bt 2 2) (v 1 0)) (and (bt 0 2) (bt 2 0) (v 1 2))) 1 0)
					((and (bt 1 0) (bt 2 2) (v 2 0)) 2 0) ((and (bt 0 0) (v 2 0)) 2 0) ((and (bt 0 2) (v 2 2)) 2 2) ((and (bt 2 0) (v 0 0)) 0 0) 
					((and (bt 2 2) (v 0 2)) 0 2) ((and (bt 0 1) (bt 1 0) (v 0 0)) 0 0) ((and (bt 0 1) (bt 1 2) (v 0 2)) 0 2) ((and (bt 1 2) (bt 2 1) (v 2 2)) 2 2) 
					((and (bt 2 1) (bt 1 0) (v 2 0)) 2 0)
					))

(defun ia (lin col)
	(equalp (nth col (nth lin tabuleiro)) pc)
)
(defun h (lin col)
	(equalp (nth col (nth lin tabuleiro)) hum)
)
(defun bt (lin col)
	(equalp (nth col (nth lin tabuleiro)) bot)
)
(defun v (lin col)
	(equalp (nth col (nth lin tabuleiro)) nil)
)
