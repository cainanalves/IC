
(defvar pc 2)
(defvar hum 1)
(defvar tabuleiro '((nil nil nil) (nil nil nil) (nil nil nil)))
(defvar regras '( 	((and (ia 0 0) (ia 0 1) (v 0 2)) 0 2) ((and (ia 0 0) (ia 0 1) (ia 0 2)) 0 1) ((and (v 0 0) (ia 0 1) (ia 0 2)) 0 0)
					((and (ia 1 0) (ia 1 1) (v 1 2)) 1 2) ((and (ia 1 0) (v 1 1) (ia 1 2)) 1 1) ((and (v 1 0) (ia 1 1) (ia 1 2)) 1 0)
					((and (ia 2 0) (ia 2 1) (v 2 2)) 2 2) ((and (ia 2 0) (v 2 1) (ia 2 2)) 2 1) ((and (v 2 0) (ia 2 1) (ia 2 2)) 2 0)
					((and (ia 0 0) (ia 1 0) (v 2 0)) 2 0) ((and (ia 0 0) (v 1 0) (ia 2 0)) 1 0) ((and (v 0 0) (ia 1 0) (ia 2 0)) 0 0)
					((and (ia 0 1) (ia 1 1) (v 2 1)) 2 1) ((and (ia 0 1) (v 1 1) (ia 2 1)) 1 1) ((and (v 0 1) (ia 1 1) (ia 2 1)) 0 1)
					((and (ia 0 2) (ia 1 2) (v 2 2)) 2 2) ((and (ia 0 2) (v 1 2) (ia 2 2)) 1 2) ((and (v 0 2) (ia 1 2) (ia 2 2)) 0 2)
					((and (ia 0 0) (ia 1 1) (v 2 2)) 2 2) ((and (ia 0 0) (v 1 1) (ia 2 2)) 1 1) ((and (v 0 0) (ia 1 1) (ia 2 2)) 0 0)
					((and (ia 0 2) (ia 1 1) (v 2 0)) 2 0) ((and (ia 0 2) (v 1 1) (ia 2 0)) 1 1) ((and (v 0 2) (ia 1 1) (ia 2 0)) 0 2)

					((and (h 0 0) (h 0 1) (v 0 2)) 0 2) ((and (h 0 0) (v 0 1) (h 0 2)) 0 1) ((and (v 0 0) (h 0 1) (h 0 2)) 0 0)
					((and (h 1 0) (h 1 1) (v 1 2)) 1 2) ((and (h 1 0) (v 1 1) (h 1 2)) 1 1) ((and (v 1 0) (h 1 1) (h 1 2)) 1 0)
					((and (h 2 0) (h 2 1) (v 2 2)) 2 2) ((and (h 2 0) (v 2 1) (h 2 2)) 2 1) ((and (v 2 0) (h 2 1) (h 2 2)) 2 0)
					((and (h 0 0) (h 1 0) (v 2 0)) 2 0) ((and (h 0 0) (v 1 0) (h 2 0)) 1 0) ((and (v 0 0) (h 1 0) (h 2 0)) 0 0)
					((and (h 0 1) (h 1 1) (v 2 1)) 2 1) ((and (h 0 1) (v 1 1) (h 2 1)) 1 1) ((and (v 0 1) (h 1 1) (h 2 1)) 0 1)
					((and (h 0 2) (h 1 2) (v 2 2)) 2 2) ((and (h 0 2) (v 1 2) (h 2 2)) 1 2) ((and (v 0 2) (h 1 2) (h 2 2)) 0 2)
					((and (h 0 0) (h 1 1) (v 2 2)) 2 2) ((and (h 0 0) (v 1 1) (h 2 2)) 1 1) ((and (v 0 0) (h 1 1) (h 2 2)) 0 0)
					((and (h 0 2) (h 1 1) (v 2 0)) 2 0) ((and (h 0 2) (v 1 1) (h 2 0)) 1 1) ((and (v 0 2) (h 1 1) (h 2 0)) 0 2)
							;Regras extras
					((v 1 1) 1 1) ((and (v 0 0) (v 0 1) (v 0 2) (v 1 0) (h 1 1) (v 1 2) (v 2 0) (v 2 1) (v 2 2)) 0 2)
					((and (h 0 0) (h 2 1) (v 2 0)) 2 0) ((or (and (h 0 1) (h 2 0) (v 0 0)) (and (h 1 0) (h 0 2) (v 0 0))) 0 0) 
					((or (and (h 0 2) (h 2 1) (v 2 2)) (and (h 2 0) (h 1 2) (v 2 2))) 2 2) ((or (and (h 0 1) (h 2 2) (v 0 2)) (and (h 0 0) (h 1 2) (v 0 2))) 0 2) 
					((or (and (h 0 0) (h 2 2) (v 1 0)) (and (h 0 2) (h 2 0) (v 1 2))) 1 0)
					((and (h 1 0) (h 2 2) (v 2 0)) 2 0) ((and (h 0 0) (v 2 0)) 2 0) ((and (h 0 2) (v 2 2)) 2 2) ((and (h 2 0) (v 0 0)) 0 0) 
					((and (h 2 2) (v 0 2)) 0 2) ((and (h 0 1) (h 1 0) (v 0 0)) 0 0) ((and (h 0 1) (h 1 2) (v 0 2)) 0 2) ((and (h 1 2) (h 2 1) (v 2 2)) 2 2) 
					((and (h 2 1) (h 1 0) (v 2 0)) 2 0)
					))

(defun ia (lin col)
	(equalp (nth col (nth lin tabuleiro)) pc)
)
(defun h (lin col)
	(equalp (nth col (nth lin tabuleiro)) hum)
)
(defun v (lin col)
	(equalp (nth col (nth lin tabuleiro)) nil)
)

(defun busca-vit ()
	(let ((vitoriaPC '(or (and (ia 0 0) (ia 0 1) (ia 0 2)) (and (ia 1 0) (ia 1 1) (ia 1 2)) (and (ia 2 0) (ia 2 1) (ia 2 2))
						(and (ia 0 0) (ia 1 0) (ia 2 0)) (and (ia 0 1) (ia 1 1) (ia 2 1)) (and (ia 0 2) (ia 1 2) (ia 2 2))
						(and (ia 0 0) (ia 1 1) (ia 2 2)) (and (ia 0 2) (ia 1 1) (ia 2 0)) 	) ) 
		  (vitoriaHUM '(or (and (h 0 0) (h 0 1) (h 0 2)) (and (h 1 0) (h 1 1) (h 1 2)) (and (h 2 0) (h 2 1) (h 2 2))
						(and (h 0 0) (h 1 0) (h 2 0)) (and (h 0 1) (h 1 1) (h 2 1)) (and (h 0 2) (h 1 2) (h 2 2))
						(and (h 0 0) (h 1 1) (h 2 2)) (and (h 0 2) (h 1 1) (h 2 0)) 	) ) )
		(cond ((eval vitoriaHUM) (write-line "ParabÃ©ns, HUMANO! VocÃª Ã© um Deus!!")) ((eval vitoriaPC) (write-line "Que pena, HUMANO! Acho que sou melhor!!")))
	)
)

(defun imprimir-tabuleiro ()
	(loop for i in tabuleiro do
		(loop for j in i do
			(if (equalp j nil)
				(write '[___])
				(if (equalp j 1)
					(write '[_x_])
					(if (equalp j 2)
						(write '[_o_])
					)
				)
			)
		)
		(terpri)
	)
)

(defun jogar-ia-regra (lin col)
	(let ()
		(terpri)
		(write-line "Vez do Computador!")
		(setf (nth col (nth lin tabuleiro)) pc)
	)
	
)

(defun jogar-ia ()
	(loop for i in regras do
		(if (eval(nth 0 i))
			(let ((lin (nth 1 i)) (col (nth 2 i)) )
				(jogar-ia-regra lin col)
				(return-from jogar-ia)
			)
		)
	)
	(jogar-aleatorio)

) 

(defun jogar-aleatorio ()
	(let (lin col)
		(loop do
			(setf lin (random 3 (make-random-state t)))
			(setf col (random 3 (make-random-state t)))
			(if (equalp (nth col (nth lin tabuleiro)) nil)
				(progn
					(jogar-ia-regra lin col)
					(return)
				)
			)
		)
	)
)

(defun validar-jogada (lin col)
	(let ()
		(if (and (>= lin 0) (<= col 2))
			(if (equalp (nth col (nth lin tabuleiro)) nil)
				(setf (nth col (nth lin tabuleiro)) hum)
				(validar-jogada (read) (read))
			)
			(validar-jogada (read) (read))
		)
		
	)
)

(defun jogar-hum ()
	(let ()
		(terpri)
		(write-line "Sua vez!")
		(validar-jogada (read) (read))
	)
	
)

(defun iniciar-jogo ()
	(loop for i from 0 to 8 do
		(if (equal (evenp i) T) 
			(jogar-hum)
			(jogar-ia)
		)
		(terpri)
		(imprimir-tabuleiro)
		(when (busca-vit) (return-from iniciar-jogo))
		
	)
	(terpri)
	(write-line "Empate!!")
)

(imprimir-tabuleiro)
(iniciar-jogo)